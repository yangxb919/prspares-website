name: Deploy to VPS

on:
  push:
    branches: [ "main", "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          BRANCH: ${{ github.ref_name }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          # Uncomment if you use custom SSH port
          # port: ${{ secrets.VPS_PORT }}
          script_stop: true
          envs: APP_DIR,BRANCH,REPO_URL
          script: |
            # 不使用 set -e，改用手动错误检查
            # set -e 会导致某些命令（如 pm2 -v）在子shell中失败时退出

            echo "=========================================="
            echo "🚀 开始部署到 VPS"
            echo "=========================================="

            # Configurable via repo secrets (optional)
            APP_DIR="${APP_DIR:-/var/www/prspares-website}"
            BRANCH="${BRANCH:-main}"
            REPO_URL="${REPO_URL:-}"

            echo "📁 应用目录: $APP_DIR"
            echo "🌿 分支: $BRANCH"
            echo ""

            # Ensure NVM/Node 20
            echo "📦 检查 Node.js 环境..."
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              . "$NVM_DIR/nvm.sh"
              echo "✅ NVM 已存在"
            else
              echo "⬇️  安装 NVM...";
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
              . "$NVM_DIR/nvm.sh"
              echo "✅ NVM 安装完成"
            fi

            nvm install 20
            nvm use 20
            echo "✅ Node.js $(node -v) 已激活"
            echo ""

            # Ensure PM2
            echo "📦 检查 PM2..."
            if ! command -v pm2 >/dev/null 2>&1; then
              echo "⬇️  安装 PM2..."
              npm i -g pm2 || { echo "❌ PM2 安装失败"; exit 1; }
              echo "✅ PM2 安装完成"
            else
              echo "✅ PM2 已存在"
              PM2_VERSION=$(pm2 -v 2>&1) || PM2_VERSION="unknown"
              echo "   版本: $PM2_VERSION"
            fi
            echo ""

            # Clone or update repo
            echo "📥 更新代码仓库..."

            # 检查目录所有者
            if [ -d "$APP_DIR" ]; then
              DIR_OWNER=$(stat -c '%U' "$APP_DIR" 2>/dev/null || stat -f '%Su' "$APP_DIR" 2>/dev/null)
              echo "📁 目录所有者: $DIR_OWNER"
            fi

            mkdir -p "$APP_DIR" || { echo "❌ 创建目录失败"; exit 1; }

            if [ ! -d "$APP_DIR/.git" ]; then
              echo "⬇️  首次克隆仓库..."
              if [ -n "$REPO_URL" ]; then
                git clone --depth=1 --branch "$BRANCH" "$REPO_URL" "$APP_DIR" || { echo "❌ 克隆仓库失败"; exit 1; }
              else
                git clone --depth=1 --branch "$BRANCH" "https://github.com/${{ github.repository }}.git" "$APP_DIR" || { echo "❌ 克隆仓库失败"; exit 1; }
              fi
              echo "✅ 仓库克隆完成"
            else
              echo "🔄 更新现有仓库..."
              cd "$APP_DIR" || { echo "❌ 进入目录失败"; exit 1; }

              # 重置 Git 配置，避免权限问题
              git config --global --add safe.directory "$APP_DIR" 2>/dev/null || true

              echo "📥 拉取最新代码..."
              git fetch origin "$BRANCH" || { echo "❌ 拉取代码失败"; git status; exit 1; }

              echo "🔄 重置到最新提交..."
              git reset --hard "origin/$BRANCH" || { echo "❌ 重置代码失败"; git status; exit 1; }

              echo "✅ 代码更新完成"
            fi

            cd "$APP_DIR" || { echo "❌ 进入目录失败"; exit 1; }
            echo "📍 当前提交: $(git log -1 --oneline)"
            echo "📍 远程最新: $(git log origin/$BRANCH -1 --oneline)"
            echo ""

            # Link production env if stored in shared path (recommended)
            if [ -f "$APP_DIR/shared/.env.production" ] && [ ! -f "$APP_DIR/.env.production" ]; then
              echo "🔗 链接生产环境配置..."
              ln -sf "$APP_DIR/shared/.env.production" "$APP_DIR/.env.production"
              echo "✅ 环境配置已链接"
            fi
            echo ""

            # Install deps and build
            echo "📦 安装依赖..."
            export HUSKY=0
            npm ci || { echo "❌ 依赖安装失败"; exit 1; }
            echo "✅ 依赖安装完成"
            echo ""

            echo "🔨 构建应用..."
            npm run build:fast || { echo "❌ 构建失败"; exit 1; }
            echo "✅ 构建完成"
            echo ""

            # Start or reload via PM2
            echo "🚀 启动/重载应用..."
            if [ -f ecosystem.config.cjs ]; then
              echo "使用 ecosystem.config.cjs 配置..."
              pm2 startOrReload ecosystem.config.cjs --only prspares-website --env production || { echo "❌ PM2 启动失败"; exit 1; }
            else
              echo "使用默认配置启动..."
              # 先尝试删除旧进程
              pm2 delete prspares-website 2>/dev/null || true
              # 启动新进程
              pm2 start node_modules/next/dist/bin/next --name prspares-website -- start -p 3000 || { echo "❌ PM2 启动失败"; exit 1; }
            fi
            pm2 save || { echo "❌ PM2 保存失败"; exit 1; }
            echo "✅ PM2 进程已更新"
            echo ""

            # Wait for app to start
            echo "⏳ 等待应用启动..."
            sleep 3
            echo ""

            # Health check
            echo "🏥 健康检查..."
            HTTP_STATUS=$(curl -I -sS http://127.0.0.1:3000/ 2>&1 | head -n 1)
            if echo "$HTTP_STATUS" | grep -q "200\|301\|302"; then
              echo "✅ 应用运行正常: $HTTP_STATUS"
            else
              echo "⚠️  应用响应异常: $HTTP_STATUS"
              echo "📋 PM2 进程状态:"
              pm2 list
              echo ""
              echo "📋 最近的错误日志:"
              pm2 logs prspares-website --err --lines 10 --nostream || true
              exit 1
            fi

            echo ""
            echo "=========================================="
            echo "✅ 部署完成！"
            echo "=========================================="
